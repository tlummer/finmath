package com.lorenzotorricelli.solex5;


import com.lorenzotorricelli.solex4.*;

public class Ex5 {





	public static void main(String[] args) throws Exception {


		System.out.println("Exercise 1 \n");

		double alpha=3.0;
		double lambda=2.0;
		int numberOfSimulations=100000;

		GammaRandomVariable g=new GammaRandomVariable(alpha, lambda);
 	
		System.out.println("Euler Gamma at 2: " +g.calculateEulerGamma(2.0)); 

		System.out.println("Gamma pdf at 1: " +g.densityFunction(1.0)); 

		System.out.println("Sample mean: "   + g.getSampleMean(numberOfSimulations) );
		System.out.println("Mu: "   + g.getMean() );

		System.out.println("Sample std DEv: "   + g.getSampleStdDeviation(numberOfSimulations) );
		System.out.println("Sigma: "   + g.getStdDeviation() );

		System.out.println("\n" );





		System.out.println("Exercise 2 \n");

		double leftBound=0.0;
		double rightBound=20;
		int numberOfBins=200;
		int  numberOfSimulationForHis=100000;

		 double[] gammaHistogram=Histogram.buildPdfHistogram(g, 
					leftBound, rightBound,
					 numberOfBins,
					numberOfSimulationForHis);
		 System.out.println("Histogram frequencies gamma:");
		
		 for(int i=0; i<numberOfBins; i++){
		 System.out.println(gammaHistogram[i]);
		 }
		System.out.println("\n");

		
		double[] exponentialHistogram=Histogram.buildPdfHistogram(
				new ExponentialRandomVariable(lambda/alpha), 
				leftBound, rightBound,
				 numberOfBins,
				numberOfSimulationForHis);
	
		 System.out.println("Histogram frequencies exponential:");
		
		 for(int i=0; i<numberOfBins; i++){
		 System.out.println(exponentialHistogram[i]);
		 }
		System.out.println("\n");

		
		
		
		System.out.println("Exercise 3 \n");


		double mu=0.2;
		double sigma=0.7;
		double sum=0.0;
		NormalRandomVariable normalForBM=new NormalRandomVariable(mu, sigma);

		long lStartTime = System.currentTimeMillis();

		Pair<Double, Double> pair = null; //always better to initialise it
		for(int i=0; i<numberOfSimulations; i++){
			pair=normalForBM.generateARBoxMuller();
			if(pair.getFirstValue()<mu &&
					pair.getSecondValue()<mu)

				sum++;
		}	
		long lEndTime = System.currentTimeMillis();


		System.out.println("The frequence of both the rv generated by the B-M algorithm to be less than mu is: "+ sum/numberOfSimulations);

		System.out.println("Elapsed time: " + (lEndTime-lStartTime) + " ms");


		

	}

}
